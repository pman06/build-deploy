steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "16.x"
    displayName: "Install Node.js"
  - script: |
      echo $(isNightly)
      echo $(isMaster)
      echo $(isDev)
      echo $(isUAT)
      echo $(Build.SourceBranch)
      echo $(isReason)
      echo $(isTest)
      ls -Rl $(System.DefaultWorkingDirectory)/azure-pipeline/
    displayName: "Get variables"

  - task: Cache@2
    inputs:
      key: '"npm" | "$(Agent.OS)" | package-lock.json'
      path: "$(nodeModules)"
      cacheHitVar: "cachehit"
    displayName: "cache node_modules"
  - task: Cache@2
    inputs:
      key: '"python" | "$(Agent.OS)" | "$(scriptPath)"'
      path: "$(scriptPath)"
      cacheHitVar: "scriptcachehit"
    displayName: "cache script"

  - script: |
      npm ci
    displayName: "npm install"
    condition: ne(variables.cachehit, 'true')

  # - task: AzureKeyVault@2
  #   inputs:
  #     azureSubscription: 'Azure subscription 1(3adc070f-9710-4754-8588-55bbc2ae1644)'
  #     KeyVaultName: 'configdev'
  #     SecretsFilter: '*'
  #     RunAsPreJob: false

  # - script: |
  #     echo REACT_APP_FLATFILE_LICENSE_KEY: $(REACT-APP-FLATFILE-LICENSE-KEY) >> application.yaml
  #     echo REACT_APP_FULLSTORY_ORG_ID: $(REACT-APP-FULLSTORY-ORG-ID) >> application.yaml
  #     echo REACT_APP_FULLSTORY_ORG_ID: $(REACT-APP-FULLSTORY-ORG-ID) >> application.yaml
  #     cp application.yaml $(System.DefaultWorkingDirectory)/src/
  #     ls $(System.DefaultWorkingDirectory)/src/
  #     echo and here
  #     ls

  # - script: |
  #     cat application.yaml
  #   displayName: "Show attached KV secrets"

  - task: DownloadSecureFile@1
    displayName: download Application file
    name: secFile
    inputs:
      secureFile: "$(file)"

  - script: |
      echo "ls temp directory"
      ls $(Agent.TempDirectory)/$(file)
      echo "ls secfile.securefilepath"
      ls $(secFile.secureFilePath)
      cp $(Agent.TempDirectory)/$(file) .
      ls ./
      mv ./$(file) ./application.yaml
      echo "ls "        
      ls ./
    displayName: "Move config files"

  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: "SONAR_TOKEN_TO_ADO"
      organization: "cooclass"
      scannerMode: "CLI"
      configMode: "manual"
      cliProjectKey: "build-deploy"
      cliProjectName: "build-deploy"
      cliSources: "$(System.DefaultWorkingDirectory)"
      extraProperties: |
        sonar.flex.cobertura.reportPaths=$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml
        sonar.exclusions=**/node_modules/**,**/test/**

  - ${{ if eq(variables.isMaster, 'true') }}:
      - script: |
          echo "running Master"
          npm run build
        displayName: "npm build"
  - ${{ elseif eq(variables.isUAT, 'true') }}:
      - script: |
          echo "running UAT"
          npm run build
        displayName: "npm build"
  - ${{ else }}:
      - script: |
          echo "running else"
          npm run build
        displayName: "npm build"
  # Execute npm test with codecoverage
  - script: |
      CI=true npm run test -- --coverage --watchAll=false --ci --reporters=default --reporters=jest-junit --coverageReporters=cobertura
    displayName: "Run test with codecoverage"

  - task: SonarCloudAnalyze@1
    inputs:
      jdkversion: "JAVA_HOME_11_X64"

  # - task: SnykSecurityScan@1
  #   inputs:
  #     serviceConnectionEndpoint: 'Azure Pipeline'
  #     testType: 'app'
  #     severityThreshold: 'low'
  #     monitorWhen: 'always'
  #     failOnIssues: false
  #     projectName: 'Azure_build_deploy_pipeline'
  #     organization: 'freemeonline'
  #     testDirectory: '$(fe-test)'

  #Provide test results as outputs
  - task: PublishTestResults@2
    displayName: "supply npm test results to pipelines"
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: "JUnit"
      testResultsFiles: "junit.xml"

  #Provide coverage as outputs
  - task: PublishCodeCoverageResults@1
    condition: succeededOrFailed()
    displayName: "Publish code coverage"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: "$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml"
      reportDirectory: "$(System.DefaultWorkingDirectory)/coverage"
      failIfCoverageEmpty: false

  - task: SonarCloudPublish@1
    condition: succeededOrFailed()
    inputs:
      pollingTimeoutSec: "300"
  # - task: CopyFiles@2
  #   inputs:
  #     SourceFolder: "$(System.DefaultWorkingDirectory)/src/"
  #     Contents: "build/**/*"
  #     TargetFolder: "$(Build.ArtifactStagingDirectory)/output"
  #     CleanTargetFolder: true
  - task: CopyFiles@2
    inputs:
      SourceFolder: "$(System.DefaultWorkingDirectory)"
      Contents: "build/**/*"
      TargetFolder: "$(Build.ArtifactStagingDirectory)/output"
      CleanTargetFolder: true
    displayName: "Copy files to artifact directory"
  # - task: ArchiveFiles@2
  #   inputs:
  #     rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/output"
  #     includeRootFolder: false
  #     archiveType: "zip"
  #     archiveFile: "$(Build.ArtifactStagingDirectory)/release/$(Build.BuildId).zip"
  #     replaceExistingArchive: true
  - task: ArchiveFiles@2
    displayName: "Archive files"
    inputs:
      rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/output/"
      includeRootFolder: false
      archiveType: zip
      archiveFile: "$(Build.ArtifactStagingDirectory)/release/rsp-$(Build.BuildId).zip"
      replaceExistingArchive: true
  # - task: PublishBuildArtifacts@1
  #   inputs:
  #     PathtoPublish: "$(Build.ArtifactStagingDirectory)/release"
  #     ArtifactName: "drop"
  #     publishLocation: "Container"

  - task: PublishPipelineArtifact@0
    displayName: "Publish server pipeline artifacts"
    inputs:
      targetPath: "$(Build.ArtifactStagingDirectory)/release/"
