# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  batch: true
  branches:
   include:
   - master

variables:
- group: RSP-VARS
- name: nodeModules
  value: $(System.DefaultWorkingDirectory)/src/node_modules
- name: fe-test
  value: "$(Build.SourcesDirectory)/src"

- name: file
  ${{ if eq('$(Build.SourceBranch)', 'ref/head/main') }}:
    value: "application.yml"
  ${{ elseif eq('$(Build.SourceBranch)', 'ref/head/dev') }}:
    value: "application-dev-pp.yaml"
  ${{ else }}:
    value: "application-az-pp.yaml"
  
pool:
  vmImage: ubuntu-latest
  uiSource: /src

stages:
- stage: Build_and_Test
  pool:
    vmImage: ubuntu-latest
  jobs:        
  - job: 'npm_install'
    displayName: "Build and test"
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'

    - task: Cache@2
      inputs:
        key: '"npm" | "$(Agent.OS)" | src/package-lock.json'
        path: '$(nodeModules)'
        cacheHitVar: 'cachehit'
      displayName: 'cache node_modules'

    - script: |
        npm ci
      workingDirectory: src
      displayName: 'npm install'
      condition: ne(variables.cachehit, 'true')
    
    
    # - task: AzureKeyVault@2
    #   inputs:
    #     azureSubscription: 'Azure subscription 1(3adc070f-9710-4754-8588-55bbc2ae1644)'
    #     KeyVaultName: 'configdev'
    #     SecretsFilter: '*'
    #     RunAsPreJob: false
    
    # - script: |
    #     echo REACT_APP_FLATFILE_LICENSE_KEY: $(REACT-APP-FLATFILE-LICENSE-KEY) >> application.yaml
    #     echo REACT_APP_FULLSTORY_ORG_ID: $(REACT-APP-FULLSTORY-ORG-ID) >> application.yaml
    #     echo REACT_APP_FULLSTORY_ORG_ID: $(REACT-APP-FULLSTORY-ORG-ID) >> application.yaml
    #     cp application.yaml $(System.DefaultWorkingDirectory)/src/
    #     ls $(System.DefaultWorkingDirectory)/src/
    #     echo and here
    #     ls

    # - script: |
    #     cat application.yaml
    #   displayName: "Show attached KV secrets"

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SONAR_TOKEN_TO_ADO'
        organization: 'cooclass'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'build-deploy'
        cliProjectName: 'build-deploy'
        cliSources: './src'
        extraProperties: |
          sonar.flex.cobertura.reportPaths=$(System.DefaultWorkingDirectory)/src/coverage/cobertura-coverage.xml
          sonar.exclusions=**/node_modules/**,**/test/**

    - task: DownloadSecureFile@1
      displayName: download Application file
      name: secFile
      inputs:
        secureFile: '$(file)'

    - script: |
        echo "ls temp directory"
        ls $(Agent.TempDirectory)/$(file)
        echo "ls secfile.securefilepath"
        ls $(secFile.secureFilePath)
        cp $(Agent.TempDirectory)/$(file) ./src/
        mv ./src/$(file) ./src/application.yaml
        echo "ls /src"        
        ls ./src/
          
    - script: npm run build
      workingDirectory: src
      displayName: "npm build"
    
    # Execute npm test with codecoverage
    - script: |
        CI=true npm run test -- --coverage --watchAll=false --ci --reporters=default --reporters=jest-junit --coverageReporters=cobertura
      workingDirectory: src
      displayName: 'Run test with codecoverage'
    
    - task: SonarCloudAnalyze@1
      inputs:
        jdkversion: 'JAVA_HOME_11_X64'
    
    - task: SnykSecurityScan@1 
      inputs:
        serviceConnectionEndpoint: 'Azure Pipeline'
        testType: 'app'
        severityThreshold: 'low'
        monitorWhen: 'always'
        failOnIssues: false
        projectName: 'Azure_build_deploy_pipeline'
        organization: 'freemeonline'
        testDirectory: '$(fe-test)'

    #Provide test results as outputs
    - task: PublishTestResults@2
      displayName: 'supply npm test results to pipelines'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'src/junit.xml'
    
    #Provide coverage as outputs
    - task: PublishCodeCoverageResults@1
      condition: succeededOrFailed()
      displayName: "Publish code coverage"
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: "$(System.DefaultWorkingDirectory)/src/coverage/cobertura-coverage.xml"
        reportDirectory: "$(System.DefaultWorkingDirectory)/src/coverage"
        failIfCoverageEmpty: false
    
    - task: SonarCloudPublish@1
      condition: succeededOrFailed()
      inputs:
        pollingTimeoutSec: '300'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/src/build'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/output'
        CleanTargetFolder: true
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/output'
        ArtifactName: 'drop'
        publishLocation: 'Container'
    

    
  
  

      
    