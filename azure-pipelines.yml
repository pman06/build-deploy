# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  batch: true
  branches:
   include:
   - master

variables:
  nodeModules: $(System.DefaultWorkingDirectory)/src/node_modules
  fe-test: "$(Build.SourcesDirectory)/src"

pool:
  vmImage: ubuntu-latest
  uiSource: /src

stages:
- stage: Build
  pool:
    vmImage: ubuntu-latest
  jobs:
  - job: 'npm_install'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'

    - task: Cache@2
      inputs:
        key: '"npm" | "$(Agent.OS)" | src/package-lock.json'
        path: '$(nodeModules)'
        cacheHitVar: 'cachehit'
      displayName: 'cache node_modules'

    - script: |
        npm ci
      workingDirectory: src
      displayName: 'npm install'
      condition: ne(variables.cachehit, 'true')
    
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SONAR_TOKEN_TO_ADO'
        organization: 'cooclass'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'build-deploy'
        cliProjectName: 'build-deploy'
        cliSources: './src'
    
    - script: npm run build
      displayName: "npm build"
    
    - task: SonarCloudAnalyze@1
      inputs:
        jdkversion: 'JAVA_HOME_11_X64'
    
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'


- stage: Test
  jobs:
  - job: 'Tests'
    steps:
    - task: Cache@2
      inputs:
        key: '"npm" | "$(Agent.OS)" | src/package-lock.json'
        path: '$(nodeModules)'
        cacheHitVar: 'cachehit'
      displayName: 'cache node_modules'

    # Execute npm run test
    - script: |
        npm run test:ci
      workingDirectory: src
      displayName: 'npm run test'
    
    #Provide test results as outputs
    - task: PublishTestResults@2
      displayName: 'supply npm test results to pipelines'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'src/junit.xml'

  - job: SecurityScans
    steps:
    - task: Cache@2
      inputs:
        key: '"npm" | "$(Agent.OS)" | src/package-lock.json'
        path: '$(nodeModules)'
        cacheHitVar: 'cachehit'
      displayName: 'cache node_modules'
    
    - script: |
        echo ls result
        ls
        echo ls '$(fe-test)'
        ls '$(fe-test)'
        echo ls $(Build.SourcesDirectory) result
        ls '$(Build.SourcesDirectory)'
  
    - task: SnykSecurityScan@1 
      inputs:
        serviceConnectionEndpoint: 'Azure Pipeline'
        testType: 'app'
        severityThreshold: 'low'
        monitorWhen: 'always'
        failOnIssues: false
        projectName: 'Azure_build_deploy_pipeline'
        organization: 'freemeonline'
        testDirectory: '$(fe-test)'
      
    

